// Вам нужно написать функция для решения Судоку.
// Функция принимает один аргумент - строку, в ней на месте пропущенных цифр стоят -.
// Функция должна вернуть строку, в которой все значения будут заполнены.

// Давайте сыграем в настоящую головоломку Судоку,
// обращая внимание на то, как мы приближаемся к решению поставленной задачи.
// - Какие стратегии мы принимаем и почему?
// - Как мы выбираем, с чего начать?
// - Как мы узнаем, когда действительно следует поставить число в клетку?
// - Что мы делаем, когда мы окончательно не знаем, как заполнить остальные клетки?
// Размышляя о нашей человеческой стратегии, важно понимать, что иногда стратегии,
// которые работают для людей, будет трудно реализовать на компьютере.
// Однако верно и обратное: стратегии компьютера могут быть не всегда удобны для людей,
// потому что нам придется писать слишком много текста,
// использовать слишком много листов бумаги или помнить много информации,
// которую в состоянии запомнить компьютер, но не человек.

// Обязательно напишите метод `prettyBoard`, который берет доску,
// записанную в строчку и возвращает отформатированный вариант,
// более привычный для нашего визуального восприятия. Например:

// ```
// 1 - 5 8 - 2 - - -
// - 9 - - 7 6 4 - 5
// 2 - - 4 - - 8 1 9
// - 1 9 - - 7 3 - 6
// 7 6 2 - 8 3 - 9 -
// - - - - 6 1 - 5 -
// - - 7 6 - - - 3 -
// 4 3 - - 2 - 5 - 1
// 6 - - 3 - 8 9 - -
// ```;

function prettyBoard(board) {
  const boardString = board.flat().join('');
  const size = 9;
  const arr = [];
  for (let i = 0; i < boardString.length; i += size) {
    const row = boardString.slice(i, i + size).split('');
    const formatRow = row.map((cell, index) => {
      if ((index + 1) % 3 === 0 && index !== size - 1) {
        return `${cell} |`;
      }
      return cell;
    });
    arr.push(formatRow.join(' '));
    if ((i + size) % (size * 3) === 0 && i !== boardString.length - size) {
      arr.push('------+-------+------');
    }
  }
  console.log(arr.join('\n'));
}

function sudoku(string) {
  const size = 9;
  const boxSize = 3;
  const board = [];
  for (let i = 0; i < string.length; i += size) {
    board.push(string.slice(i, i + size).split(''));
  }
  const findEmpty = (board) => {
    for (let r = 0; r < size; r += 1) {
      for (let c = 0; c < size; c += 1) {
        if (board[r][c] === '-') {
          return [r, c];
        }
      }
    }
    return null;
  };

  const validate = (num, pos, board) => {
    const [r, c] = pos;

    // Check rows
    for (let i = 0; i < size; i += 1) {
      if (board[i][c] === num && i !== r) {
        return false;
      }
    }

    // Check cols
    for (let i = 0; i < size; i += 1) {
      if (board[r][i] === num && i !== c) {
        return false;
      }
    }

    // Check box
    const boxRow = Math.floor(r / boxSize) * boxSize;
    const boxCol = Math.floor(c / boxSize) * boxSize;

    for (let i = boxRow; i < boxRow + boxSize; i += 1) {
      for (let j = boxCol; j < boxCol + boxSize; j += 1) {
        if (board[i][j] === num && i !== r && j !== c) {
          return false;
        }
      }
    }
    return true;
  };

  const solve = () => {
    const currPos = findEmpty(board);
    if (currPos === null) {
      return true;
    }
    for (let i = 1; i < size + 1; i += 1) {
      const currNum = i.toString();
      const isValid = validate(currNum, currPos, board);

      if (isValid) {
        const [x, y] = currPos;
        board[x][y] = currNum;

        if (solve()) {
          return true;
        }

        board[x][y] = '-';
      }
    }
    return false;
  };
  solve();
  return prettyBoard(board);
}

// Ниже представленны тестовые данные для вашей функции, они имеют 3 уровня сложности
// * Пять головоломок могут быть решены с помощью базовой логики.
// * Пять требуют немного более продвинутой логики.
// * Пять требуют от вашего решателя умения угадывать и перерешивать, если зашёл в тупик.

sudoku(
  '53--7----6--195----98----6-8---6---34--8-3--17---2---6-6----28----419--5----8--79',
);

sudoku(
  '1-58-2----9--764-52--4--819-19--73-6762-83-9-----61-5---76---3-43--2-5-16--3-89--',
);
sudoku(
  '--5-3--819-285--6-6----4-5---74-283-34976---5--83--49-15--87--2-9----6---26-495-3',
);
sudoku(
  '29-5----77-----4----4738-129-2--3-648---5--7-5---672--3-9--4--5----8-7---87--51-9',
);
sudoku(
  '-8--2-----4-5--32--2-3-9-466---9---4---64-5-1134-5-7--36---4--24-723-6-----7--45-',
);
sudoku(
  '6-873----2-----46-----6482--8---57-19--618--4-31----8-86-2---39-5----1--1--4562--',
);
sudoku(
  '---6891--8------2915------84-3----5-2----5----9-24-8-1-847--91-5------6--6-41----',
);
sudoku(
  '-3-5--8-45-42---1---8--9---79-8-61-3-----54---5------78-----7-2---7-46--61-3--5--',
);
sudoku(
  '-96-4---11---6---45-481-39---795--43-3--8----4-5-23-18-1-63--59-59-7-83---359---7',
);
sudoku(
  '----754----------8-8-19----3----1-6--------34----6817-2-4---6-39------2-53-2-----',
);
sudoku(
  '3---------5-7-3--8----28-7-7------43-----------39-41-54--3--8--1---4----968---2--',
);
sudoku(
  '3-26-9--55--73----------9-----94----------1-9----57-6---85----6--------3-19-82-4-',
);
sudoku(
  '-2-5----48-5--------48-9-2------5-73-9-----6-25-9------3-6-18--------4-71----4-9-',
);
sudoku(
  '--7--8------2---6-65--79----7----3-5-83---67-2-1----8----71--38-2---5------4--2--',
);
sudoku(
  '----------2-65-------18--4--9----6-4-3---57-------------------73------9----------',
);
sudoku(
  '---------------------------------------------------------------------------------',
);
